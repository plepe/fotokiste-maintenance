#!/usr/bin/env node

/*
 * Parameter:
 * -nX  save message with msg_number X
 * -b   don't create a backup file
*/

const conf = require('./conf.json')
const attachment_types = require('./attachment_types.json')
const MailParser = require('mailparser').MailParser
const fs = require('fs')
const mod_getopt = require('posix-getopt')
const async = require('async')
const DrupalREST = require('drupal-rest')
const getUserFromMail = require('./src/getUserFromMail')
global.fetch = require('node-fetch')

const drupal = new DrupalREST(conf.drupal)
drupal.login(() => {
  console.log('logged in')
  start_mail()
})

const wait = []
let from
let user
const attachments = []
const node = {
  type: [{target_id: 'message'}],
  body: [{}],
  field_attachments: []
}

function receive_headers (headers) {
  node.title = [{value: headers.get('subject')}]
  node.created = [{value: new Date(headers.get('date')).toISOString().replace('.000Z', 'Z')}]

  if (headers.get('references')) {
    let references = headers.get('references')
    if (typeof references === 'string') {
      references = [references]
    }

    references.forEach(r => {
      const m = r.match(/^<node-([0-9]+)@stadtverkehr-austria-fotos>/)
      if (m) {
	node.field_reply_to = [{target_id: m[1]}]
      }
    })
  }

  from = headers.get('from')
  console.log('done receive headers')
  console.log(JSON.stringify(node, null, '  '))
}

function receive_attachment (attachment) {
  console.log('receive attachment')
  attachments.push(attachment)
  attachment.release()
}

function uploadAttachment (attachment, callback) {
  const def = attachment_types[attachment.contentType]
  if (!def) {
    console.error('unknown attachment type', attachment.contentType)
    return callback()
  }
  if (def.skip) {
    return callback()
  }

  let file
  const mediaRef = {target_id: null}
  node.field_attachments.push(mediaRef)
  wait.push(callback)

  async.waterfall([
    (done) => {
      drupal.fileUpload({
	filename: attachment.filename,
	content: attachment.content,
      }, 'media/' + def.media_bundle + '/' + def.file_field,
      {},
      done)
    },
    (_file, done) => {
      file = _file
      const media = {
	bundle: [{ target_id: def.media_bundle }],
	created: node.created,
	uid: [{target_id: user.uid[0].value}],
	name: [{value: attachment.filename || def.default_filename}]
      }

      media[def.file_field] = [{target_id: file.fid[0].value}]

      drupal.mediaSave(null, media, {}, done)
    },
    (media, done) => {
      mediaRef.target_id = media.mid[0].value
      done()
    },
    (done) => {
      // update author date/uid of file
      drupal.fileSave(file.fid[0].value, {
	type: file.type,
	created: node.created,
	uid: [{target_id: user.uid[0].value}]
      }, {}, done)
    }
  ], callback)
  //  content_type: attachment.contentType
}

function start_mail () {
  if (backup) { mailcopy = fs.createWriteStream('/tmp/y') }

  process.stdin.resume()
  process.stdin.on('data', function (chunk) {
    mailparser.write(chunk)
    if (backup) { mailcopy.write(chunk) }
  })
  process.stdin.on('end', function () {
    mailparser.end()
    if (backup) { mailcopy.end() }
  })
}

var att_id = 0
var msg_number = 0
let mailcopy
var backup = true

// Arguments handling
let parser, option
parser = new mod_getopt.BasicParser('bn:', process.argv)
opt = {}
while ((option = parser.getopt()) !== undefined) {
  opt[option.option] = true

  if (option.optarg !== undefined) { opt[option.option] = option.optarg }

  switch (option.option) {
    case 'n':
      msg_number = option.optarg
      break
    case 'b':
      backup = false
      break
  }
}

var mailparser = new MailParser({
  streamAttachments: true
})
wait.text = true
wait.headers = true
mailparser.on('data', data => {
  if (data.type === 'attachment') {
    receive_attachment(data)
  }
  else if (data.type === 'text') {
    if (data.html) {
      node.body[0].value = data.html
      node.body[0].format = 'basic_html'
    } else {
      node.body[0].value = data.text
      node.body[0].format = 'text'
    }

  }
  else {
  }
})
mailparser.on('headers', receive_headers)
mailparser.on('end', data => {
  saveMessage()
})

function saveMessage (callback) {
  async.waterfall([
    (done) => getUserFromMail(drupal, from.value[0], (err, _user) => {
      if (err) { return done(err) }
      if (!_user) { return done(new Error('user not found')) }

      user = _user
      node.uid = [{target_id: user.uid[0].value}]
      done()
    }),
    (done) => async.eachSeries(attachments, (attachment, done) => uploadAttachment(attachment, done), done),
    (done) => {
      drupal.nodeSave(null, node, {}, done)
    }
  ], (err) => {
    if (err) { return console.error(err) }
  })
}

